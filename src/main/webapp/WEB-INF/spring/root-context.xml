<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


   <!-- 파일 업로드 
   fileUpload.jsp - > FileController.java
   return 파일 경로 정보
     일반 파일:  c:\upload \2022\12
     이미지파일: E:\DCOM_0725\06_SPRING\workspace\SW_SH22\src\main\webapp\resources\upload \2022\12
   
     이미지 업로드 경로:
   workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0
   
   1. 파일 rename : YYYYMMDD_UUID
   2. 이미지파일 : 썸네일
   
   id="multipartResolver" 고정!! 변경하면 오류발생 주의.
     
   maxUploadSize : 최대 업로드 가능한 바이트 크기. -1은 제한이 없음을 의미한다. 기본값은 -1 
   defaultEncoding요청을 파싱할 때 사용할 캐릭터 인코딩. 지정하지 않을 경우,
   maxInMemorySize디스크에 임시 파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트 크기. 기본값은 10240 바이트이다. 
   -->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="defaultEncoding" value="UTF-8"/>
    <property name="maxUploadSize"   value="52428800"/>
    <property name="maxInMemorySize" value="52428800" />
  </bean>

  <!-- 트랜잭션 매니저 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- do*로 시작하는 메서드는 트랜잭션관리 대상에서 제외 -->
			<tx:method name="do*" read-only="true" />
			<!-- up*시작하는 메서드는 트랜잭션 관리 대상이다. -->
			<tx:method name="up*" read-only="false" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- mybatis 설정 -->
	<!-- mybatis db연결 객체 생성 -->
	<bean id="sqlSessionTemplate"	class="org.mybatis.spring.SqlSessionTemplate">
		<!-- xml mybatis설정 파일 읽기 -->
		<constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>

	<!-- xml mybatis설정 파일 읽기 -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:mapper/**/*.xml" />
	</bean>

	<!-- database.properties read -->
	<context:property-placeholder location="classpath:/resource/config/database.properties" />

	<!--SimpleDriverDataSource to --> 
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- <property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" /> -->
		<property name="driverClassName" value="${jdbc.driver}" />
    <!-- <property name="url" value="jdbc:log4jdbc:oracle:thin:@orcl_high?TNS_ADMIN=C:/Wallet_orcl" /> -->
		<!-- <property name="url" value="jdbc:log4jdbc:oracle:thin:@192.168.3.101:1521:XE" /> -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 최대 접속 허용 갯수 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 여분으로 남결질 Connection -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- DB연결 대기시간 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- Connection 잘못 관리되어 버려진 연결 찾아 재활용 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 버려진 연결로 인식할 기본 시간 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
	</bean>
	
	
   <context:property-placeholder location="classpath:/resource/config/database.properties" />

   <!-- 이메일 인증 관련 빈 등록 -->
   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="8089" />
      <property name="username" value="tkdeja941" />
      <property name="password" value="pzrndfbrqtdtgukb" />
      <property name="javaMailProperties">
         <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
                <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
            </props>
      </property>
      
   </bean>
</beans>
